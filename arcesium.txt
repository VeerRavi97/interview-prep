
// top[n]
// input array [i] =[1,2,_,1,2]
// aux array[i] = [2, , ]

input[]={_,_,_};
n= 7;
int top[n] ={-1,-1,-1};
int aux[n] ={1,2,3,4,5,6,7}; // next free space available
int global_idx = 0;
int StackSize= 0;
void push(int nthStack, int data) {
  if(StackSize>n) {
      cout << "Stack OverFlow" << endl;
      return;
  }  
  int temp = global_idx; // 
  global_idx= aux[nthStack]; // next free space available
  aux[temp]= top[nthStack]; // store previous element if already occupied
  top[nthStack]= temp; // update top of each stack
  input[temp]= data; // finally insert the data
  StackSize++;  // update stack Size
} 

void pop(int nthStack) { 
    if(StackSize==0){
        cout << "Stack underFLow" << endl;
        return; 
    }
    if(top[nthStack]==-1){
         cout << "Stack underFLow" << endl;
        return; 
    }
  int temp = top[nthStack];  // remove from top of nth stack 
  top[nthStack] = aux[nthStack]; // top will store previous ele
  aux[temp]= global_idx; // aux[temp] -> next free space 
  global_idx= temp; // 
  StackSize--;
  // reduce stack Size
 // popped ele = arr[idx];
} 

// [-1,-1,-1]:
// [1,  | 5 | 7]; 

[1,2,3,_]; // aux[]= 3,

push(1,3); // [3 | ]  / /global_idx==1 
push(2,4); // [3,| 4 | ]; 
push(1,2); //  [3, 1 | 4 ]
push(1,5); // [3, 1, 5 | 4 ]
pop(2); // from from 2nd stack
push(3,10);